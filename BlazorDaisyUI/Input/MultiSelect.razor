@namespace BlazorDaisyUI
@typeparam T

<div class="dropdown h-auto w-full" aria-haspopup="true">
    <div tabindex="@(Disabled && !Truncate ? "" : "0")" class="select select-bordered dropdown h-auto w-full" disabled="@Disabled">
        <div class="my-[9px] @(Truncate ? "truncate" : "")">
            @foreach (var value in _selectedValues)
            {
                <div class="badge gap-2 max-w-full mr-2">
                    <div class="h-full w-full truncate">@ToStringFunc(value)</div>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" 
                        class="inline-block w-4 h-4 stroke-current" @onclick="() => UpdateOption(value, false)">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </div>
            }
        </div>
    </div>
    <div tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 border w-full" aria-label="submenu">
        <ul class="max-h-[300px] overflow-auto">
            @foreach (var option in _options.Keys)
            {
                <li class="@(Disabled ? "disabled" : "")">
                    <label class="label cursor-pointer">
                        <span class="label-text">@ToStringFunc(option)</span>
                        <Checkbox Value="_options[option]" ValueChanged="(b) => UpdateOption(option, b!.Value)" Disabled="Disabled" />
                    </label>
                </li>
            }
        </ul>
    </div>
</div>

@code {

    private IDictionary<T, bool> _options = new Dictionary<T, bool>();
    private HashSet<T> _selectedValues = new HashSet<T>();
    private IEqualityComparer<T>? _comparer;

    /// <summary>
    /// The selected values.
    /// </summary>
    [Parameter]
    public ICollection<T> SelectedValues
    {
        get
        {
            if (_selectedValues == null)
                _selectedValues = new HashSet<T>(_comparer);
            return _selectedValues;
        }
        set
        {
            var set = value ?? new HashSet<T>(_comparer);
            if (SelectedValues.Count() == set.Count() && _selectedValues.All(x => set.Contains(x)))
                return;
            _selectedValues = new HashSet<T>(set, _comparer);

            UpdateOptionSelection(_options.Keys);

            SelectedValuesChanged.InvokeAsync(new HashSet<T>(SelectedValues, _comparer));
        }
    }

    /// <summary>
    /// Event callback when the selected values are changed.
    /// </summary>
    [Parameter] public EventCallback<ICollection<T>> SelectedValuesChanged { get; set; }

    /// <summary>
    /// The possible options in the dropdown.
    /// </summary>
    [Parameter]
    public ICollection<T> Options
    {
        get => _options.Keys;
        set
        {
            _options = new Dictionary<T, bool>(_comparer);
            if (value is null || !value.Any())
                return;
            UpdateOptionSelection(value);
        }
    }

    /// <summary>
    /// The Comparer to use for comparing selected values internally.
    /// </summary>
    [Parameter]
    public IEqualityComparer<T>? Comparer
    {
        get => _comparer;
        set
        {
            _comparer = value;
            _selectedValues = new HashSet<T>(_selectedValues, _comparer);
            _options = new Dictionary<T, bool>(_options, _comparer);
            SelectedValues = _selectedValues;
        }
    }

    /// <summary>
    /// Display value for the selected values and options.
    /// </summary>
    [Parameter] public Func<T, string?> ToStringFunc { get; set; } = t => t?.ToString();

    /// <summary>
    /// Truncate the selected values.
    /// </summary>
    [Parameter] public bool Truncate { get; set; }

    /// <summary>
    /// Input is read-only.
    /// </summary>
    [Parameter] public bool Disabled { get; set; }

    private void UpdateOption(T option, bool selected)
    {
        if (Disabled)
            return;

        if (selected)
            _selectedValues.Add(option);
        else
            _selectedValues.Remove(option);
        _options[option] = selected;
        SelectedValuesChanged.InvokeAsync(new HashSet<T>(SelectedValues, _comparer));
    }

    private void UpdateOptionSelection(IEnumerable<T> keys)
    {
        foreach (var option in keys)
            _options[option] = _selectedValues.Contains(option);
    }

}
